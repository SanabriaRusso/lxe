apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: lxc-kube-flannel-ds
  namespace: kube-system
  labels:
    tier: node
    app: flannel
spec:
  selector:
    matchLabels:
      k8s-app: cni-flannel
  updateStrategy:
    type: OnDelete
  template:
    metadata:
      labels:
        tier: node
        app: flannel
        k8s-app: cni-flannel
    spec:
      hostNetwork: true
      nodeSelector:
        beta.kubernetes.io/arch: amd64
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      serviceAccount: flannel
      serviceAccountName: flannel
      containers:
      - name: kube-flannel
        securityContext:
          privileged: true
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: user-data
            value: |
              #cloud-config
              packages:
                - kube-flannel
              write_files:
                - path: /etc/systemd/system/flannel.service.d/10-flannel.conf
                  owner: root:root
                  permissions: '0600'
                  content: |
                    [Service]
                    EnvironmentFile=/etc/flannel/environment
                    ExecStart=
                    ExecStart=/usr/bin/flanneld --ip-masq --kube-subnet-mgr
              runcmd:
                - "mkdir -p /etc/cni/net.d/"
                - "cp -f /etc/kube-flannel/cni-conf.json /etc/cni/net.d/10-flannel.conflist"
                - "mkdir /etc/flannel"
                - "xargs -0 -n 1 echo < /proc/1/environ > /etc/flannel/environment"
                - "systemctl daemon-reload"
                - "systemctl enable flannel"
                - "systemctl start flannel"
        image: ubuntu/16.04
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: runflannel
          mountPath: /run/flannel
        - name: flannel-cfg
          mountPath: /etc/kube-flannel/
        - name: cni
          mountPath: /etc/cni/net.d
        resources:
          requests:
            cpu: "100m"
            memory: "50Mi"
          limits:
            cpu: "100m"
            memory: "50Mi"
      volumes:
        - name: runflannel
          hostPath:
            path: /run/flannel
            type: DirectoryOrCreate
        - name: cni
          hostPath:
            path: /etc/cni/net.d
            type: DirectoryOrCreate
        - name: flannel-cfg
          configMap:
            name: kube-flannel-cfg
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: flannel
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes/status
    verbs:
      - patch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: flannel
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flannel
subjects:
- kind: ServiceAccount
  name: flannel
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flannel
  namespace: kube-system
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: kube-flannel-cfg
  namespace: kube-system
  labels:
    tier: node
    app: flannel
data:
  cni-conf.json: |
    {
      "name": "cbr0",
      "plugins": [
        {
          "type": "flannel",
          "delegate": {
            "hairpinMode": true,
            "isDefaultGateway": true
          }
        },
        {
          "type": "portmap",
          "capabilities": {
            "portMappings": true
          }
        }
      ]
    }
  net-conf.json: |
    {
      "Network": "10.244.0.0/16",
      "Backend": {
        "Type": "vxlan"
      }
    }
